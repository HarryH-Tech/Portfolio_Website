{"version":3,"sources":["components/Title.js","components/CasesWorldwide.js","redux/Actions.js","components/Introduction.js","components/CountryLocationMap.js","components/Error.js","components/CasesByCountry.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["Title","Segment","inverted","color","style","width","maxWidth","Header","textAlign","block","Icon","size","name","Content","fontSize","paddingLeft","paddingRight","mapDispatchToProps","getWorldwideSummary","dispatch","getState","a","axios","get","response","type","payload","data","connect","state","Global","useEffect","Container","Group","raised","compact","TotalConfirmed","toLocaleString","NewConfirmed","TotalDeaths","NewDeaths","TotalRecovered","NewRecovered","Introduction","props","id","CountryLocationMap","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showInfoWindow","this","lat","lng","google","zoom","initialCenter","parseInt","center","height","margin","position","onClick","visible","Component","GoogleApiWrapper","apiKey","Error","tertiary","CasesByCountry","useDispatch","availableCountries","useSelector","countryCases","error","sort","b","Country","handleChange","country","confirmedCasesSinceDay1Response","currentAllCasesInCountryResponse","Promise","all","length","confirmedCasesSinceDay1ResponseWithoutProvinces","filter","c","Province","dataPoints","countryData","labels","datasets","barThickness","label","backgroundColor","borderColor","i","push","Date","slice","Confirmed","Deaths","Recovered","Lat","Lon","getCountryCasesAction","Form","Dropdown","icon","border","placeholder","fluid","selection","search","onChange","result","value","options","map","key","ISO2","text","secondary","List","divided","relaxed","Item","getAllTypesOfCases","responsive","legend","display","scales","yAxes","scaleLabel","labelString","xAxes","App","Grid","Row","Column","CasesWorldwide","covidInitialState","allTypesOfCountryCases","rootReducer","action","createStore","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.3af5eb2d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Header, Segment, Icon } from \"semantic-ui-react\";\r\n\r\nfunction Title() {\r\n  return (\r\n    <div>\r\n      <Segment\r\n        inverted\r\n        color=\"red\"\r\n        style={{ width: \"100% !important\", maxWidth: \"100%\" }}\r\n      >\r\n        <Header textAlign=\"center\" block color=\"green\">\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Icon size=\"huge\" name=\"globe\" />\r\n            <Header.Content>\r\n              <h1\r\n                style={{\r\n                  fontSize: \"4rem\",\r\n                  paddingLeft: \"40px\",\r\n                  paddingRight: \"40px\",\r\n                }}\r\n              >\r\n                COVID-19\r\n              </h1>\r\n            </Header.Content>\r\n            <Icon size=\"huge\" name=\"bug\" />\r\n          </div>\r\n        </Header>\r\n      </Segment>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getWorldwideSummaryAction } from \"../redux/Actions\";\r\nimport { Container, Segment } from \"semantic-ui-react\";\r\n\r\nfunction Worldwide({ data, getWorldwideSummary }) {\r\n  useEffect(() => {\r\n    getWorldwideSummary();\r\n  }, [getWorldwideSummary]);\r\n\r\n  return (\r\n    <Container textAlign=\"center\">\r\n      <Segment.Group raised compact>\r\n        <Segment color=\"red\">\r\n          <h1>Cases Worldwide</h1>\r\n        </Segment>\r\n        <Segment>\r\n          <p>\r\n            <strong>Total Confirmed Cases: </strong>\r\n            {data && data.TotalConfirmed.toLocaleString()}\r\n          </p>\r\n        </Segment>\r\n        <Segment>\r\n          <p>\r\n            <strong>Total New Cases Today: </strong>{\" \"}\r\n            {data && data.NewConfirmed.toLocaleString()}\r\n          </p>\r\n        </Segment>\r\n        <Segment>\r\n          <p>\r\n            <strong>Total Deaths:</strong>{\" \"}\r\n            {data && data.TotalDeaths.toLocaleString()}\r\n          </p>\r\n        </Segment>\r\n        <Segment>\r\n          <p>\r\n            <strong>Total Deaths Today:</strong>{\" \"}\r\n            {data && data.NewDeaths.toLocaleString()}\r\n          </p>\r\n        </Segment>\r\n        <Segment>\r\n          <p>\r\n            <strong>Total Recoveries:</strong>{\" \"}\r\n            {data && data.TotalRecovered.toLocaleString()}\r\n          </p>\r\n        </Segment>\r\n        <Segment>\r\n          <p>\r\n            <strong>Total Recoveries Today:</strong>{\" \"}\r\n            {data && data.NewRecovered.toLocaleString()}\r\n          </p>\r\n        </Segment>\r\n      </Segment.Group>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    data: state.data.Global,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getWorldwideSummary: getWorldwideSummaryAction,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Worldwide);\r\n","import axios from \"axios\";\r\n\r\nexport const GET_WORLDWIDE_SUMMARY = \"GET_WORLDWIDE_SUMMARY\";\r\nexport const GET_COUNTRY_CASES = \"GET_COUNTRY_CASES\";\r\nexport const GET_COUNTRY_TOTAL_CASES = \"GET_COUNTRY_CASES\";\r\nexport const GET_ALL_AVAILABLE_COUNTRIES = \"GET_ALL_COUNTRIES\";\r\nexport const SET_ERROR = \"SET_ERROR\";\r\n\r\nexport const CREATE_BOARD = \"CREATE_BOARD\";\r\n\r\n//Get Total Deaths, Recoveries, Confirmed Cases, Etc\r\nexport const getWorldwideSummaryAction = () => async (dispatch, getState) => {\r\n  const response = await axios.get(\"https://api.covid19api.com/summary \");\r\n  return dispatch({\r\n    type: GET_WORLDWIDE_SUMMARY,\r\n    payload: response.data,\r\n  });\r\n};\r\n\r\n// Get all countries to populate dropdown menu\r\nexport const getAllAvailableCountriesAction = () => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const response = await axios.get(\"https://api.covid19api.com/countries\");\r\n\r\n  //Sort response so it lists the countries in\r\n  //alphabetical order\r\n  response.data.sort(function (a, b) {\r\n    return a.Country < b.Country ? -1 : a.Country > b.Country ? 1 : 0;\r\n  });\r\n\r\n  return dispatch({\r\n    type: GET_ALL_AVAILABLE_COUNTRIES,\r\n    payload: response.data,\r\n  });\r\n};\r\n\r\n// Get number of confirmed cases in a country\r\n// to create chart\r\nexport const getCountryCasesAction = (country) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const confirmedCasesSinceDay1Response = await axios.get(\r\n    `https://api.covid19api.com/dayone/country/${country}`\r\n  );\r\n\r\n  const currentAllCasesInCountryResponse = await axios.get(\r\n    `https://api.covid19api.com/live/country/${country}`\r\n  );\r\n\r\n  Promise.all([\r\n    confirmedCasesSinceDay1Response,\r\n    currentAllCasesInCountryResponse,\r\n  ]);\r\n\r\n  if (\r\n    confirmedCasesSinceDay1Response.data.length > 0 &&\r\n    currentAllCasesInCountryResponse.data.length > 0\r\n  ) {\r\n    /*\r\n  *****Removes responses that do not contain a province.*****\r\n  Needed as some countries (such as UK or France) return\r\n  number of cases for different territories, distorting the \r\n  graph. \r\n  Now it only returns the number of cases for the main country.\r\n  This may have unreliable results for some countries but I haven't\r\n  found any yet. \r\n  */\r\n    const confirmedCasesSinceDay1ResponseWithoutProvinces = confirmedCasesSinceDay1Response.data.filter(\r\n      (c) => {\r\n        if (!c.Province) {\r\n          return c;\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n    );\r\n\r\n    /* \r\n  Create a formatted object to pass to\r\n  the \"data\" prop in the bar chart. It must\r\n  be formatted as below to work correctly.\r\n  */\r\n    let dataPoints = {\r\n      lat: \"\",\r\n      lng: \"\",\r\n      countryData: [],\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          barThickness: 4,\r\n          label: \"Number of Confirmed COVID-19 Cases\",\r\n          backgroundColor: \"#4477ff\",\r\n          borderColor: \"#4477ff\",\r\n          data: [],\r\n        },\r\n        {\r\n          barThickness: 4,\r\n          label: \"Number of COVID-19 Deaths\",\r\n          backgroundColor: \"#000\",\r\n          borderColor: \"#000\",\r\n          data: [],\r\n        },\r\n        {\r\n          barThickness: 4,\r\n          label: \"Number of COVID-19 Recoveries\",\r\n          backgroundColor: \"#55ff55\",\r\n          borderColor: \"#55ff55\",\r\n          data: [],\r\n        },\r\n      ],\r\n    };\r\n\r\n    for (\r\n      var i = 0;\r\n      i < confirmedCasesSinceDay1ResponseWithoutProvinces.length;\r\n      i++\r\n    ) {\r\n      dataPoints.labels.push(\r\n        confirmedCasesSinceDay1ResponseWithoutProvinces[i].Date.slice(0, -10)\r\n      );\r\n      dataPoints.datasets[0].data.push(\r\n        confirmedCasesSinceDay1ResponseWithoutProvinces[i].Confirmed\r\n      );\r\n      dataPoints.datasets[1].data.push(\r\n        confirmedCasesSinceDay1ResponseWithoutProvinces[i].Deaths\r\n      );\r\n      dataPoints.datasets[2].data.push(\r\n        confirmedCasesSinceDay1ResponseWithoutProvinces[i].Recovered\r\n      );\r\n    }\r\n\r\n    dataPoints.countryData.push(\r\n      confirmedCasesSinceDay1ResponseWithoutProvinces\r\n    );\r\n\r\n    dataPoints.lat = confirmedCasesSinceDay1Response.data[0].Lat;\r\n    dataPoints.lng = confirmedCasesSinceDay1Response.data[0].Lon;\r\n\r\n    return dispatch({\r\n      type: GET_COUNTRY_CASES,\r\n      payload: dataPoints,\r\n      error: false,\r\n    });\r\n  } else {\r\n    return dispatch({\r\n      type: SET_ERROR,\r\n      payload: true,\r\n    });\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { Segment, Header } from \"semantic-ui-react\";\r\n\r\nimport \"../assets/MediaQueries.css\";\r\n\r\nfunction Introduction(props) {\r\n  return (\r\n    <>\r\n      <div id=\"intro\">\r\n        <Segment color=\"red\">\r\n          <Header textAlign=\"center\">\r\n            <h1>About COVID-19</h1>\r\n          </Header>\r\n          <p style={{ textAlign: \"justify\" }}>\r\n            COVID-19 first originated at the end of 2019 in Wuhan, China. It is\r\n            an infectious disease caused by severe acute respiratory syndrome\r\n            coronavirus 2 (SARS-COV-2). The most common symptoms include fever\r\n            and a cough. However other symptoms such as fatigue, muscle pain,\r\n            diarrhea and loss of smell have also been reported. The time from\r\n            exposure to onset of symptoms is typically around five days, but may\r\n            range from two to fourteen days. While the majority of cases result\r\n            in mild symptoms, some progress to viral pneumonia and multi-organ\r\n            failure.\r\n          </p>\r\n        </Segment>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Introduction;\r\n","import React, { Component } from \"react\";\r\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\";\r\n\r\nclass CountryLocationMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showInfoWindow: false,\r\n      activeMarker: {},\r\n      selectedPlace: {},\r\n    };\r\n  }\r\n\r\n  onMarkerClick = (props, marker, e) =>\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showInfoWindow: true,\r\n    });\r\n\r\n  render() {\r\n    const { showInfoWindow, activeMarker } = this.state;\r\n    const { lat, lng, google } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <div id=\"map-container\">\r\n          <Map\r\n            google={google}\r\n            zoom={5}\r\n            initialCenter={{\r\n              lat: parseInt(lat),\r\n              lng: parseInt(lng),\r\n            }}\r\n            center={{\r\n              lat: parseInt(lat),\r\n              lng: parseInt(lng),\r\n            }}\r\n            style={{\r\n              width: \"90%\",\r\n              height: \"90%\",\r\n              margin: \"auto\",\r\n            }}\r\n          >\r\n            <Marker\r\n              position={{\r\n                lat: parseInt(lat),\r\n                lng: parseInt(lng),\r\n              }}\r\n              name={\"Location\"}\r\n              onClick={this.onMarkerClick}\r\n            ></Marker>\r\n\r\n            <InfoWindow marker={activeMarker} visible={showInfoWindow}>\r\n              <div>\r\n                <strong>Latitude:</strong> {lat}\r\n                <br />\r\n                <strong>Longitude:</strong> {lng}\r\n              </div>\r\n            </InfoWindow>\r\n          </Map>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyDgYSEUDOXvQpldfmt_sS1_Qqp4mWIYCko\",\r\n})(CountryLocationMap);\r\n","import React from \"react\";\r\nimport { Segment, Icon } from \"semantic-ui-react\";\r\n\r\nfunction Error(props) {\r\n  return (\r\n    <div>\r\n      <Segment\r\n        inverted\r\n        color=\"red\"\r\n        tertiary\r\n        style={{ width: \"80%\", margin: \"15px auto\" }}\r\n        textAlign=\"center\"\r\n      >\r\n        <Icon name=\"star\" size=\"huge\" />\r\n        <h2>\r\n          {\" \"}\r\n          Either this country does not have any reported cases or we don't have\r\n          any information available about that country at the moment.\r\n        </h2>\r\n      </Segment>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Error;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getCountryCasesAction,\r\n  getAllAvailableCountriesAction,\r\n} from \"../redux/Actions\";\r\n\r\nimport { Form, Segment, List } from \"semantic-ui-react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport CountryLocationMap from \"./CountryLocationMap\";\r\nimport Error from \"./Error\";\r\n\r\nimport \"../assets/MediaQueries.css\";\r\n\r\nfunction CasesByCountry(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const availableCountries = useSelector((state) => state.availableCountries);\r\n  const countryCases = useSelector((state) => state.countryCases);\r\n  const error = useSelector((state) => state.error);\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllAvailableCountriesAction());\r\n  }, [dispatch]);\r\n\r\n  const handleChange = (country) => {\r\n    dispatch(getCountryCasesAction(country));\r\n  };\r\n\r\n  const getAllTypesOfCases = () => {\r\n    const length = countryCases.countryData[0].length;\r\n    return (\r\n      <Segment secondary style={{ width: \"80%\", margin: \"auto\" }}>\r\n        <List divided inverted relaxed>\r\n          <List.Item>\r\n            <List.Content>\r\n              Total Number of Confirmed Cases As Of Today:{\" \"}\r\n              <strong>\r\n                {\" \"}\r\n                {countryCases.countryData[0][\r\n                  length - 1\r\n                ].Confirmed.toLocaleString()}\r\n              </strong>\r\n            </List.Content>\r\n          </List.Item>\r\n          <List.Item>\r\n            <List.Content>\r\n              Total Number of Confirmed Deaths Due to Coronavirus As Of Today:{\" \"}\r\n              <strong>\r\n                {\" \"}\r\n                {countryCases.countryData[0][\r\n                  length - 1\r\n                ].Deaths.toLocaleString()}\r\n              </strong>\r\n            </List.Content>\r\n          </List.Item>\r\n          <List.Item>\r\n            <List.Content>\r\n              Total Number of Recoveries from Coronavirus As Of Today:{\" \"}\r\n              <strong>\r\n                {\" \"}\r\n                {countryCases.countryData[0][\r\n                  length - 1\r\n                ].Recovered.toLocaleString()}\r\n              </strong>\r\n            </List.Content>\r\n          </List.Item>\r\n        </List>\r\n      </Segment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form.Dropdown\r\n        icon=\"search\"\r\n        style={{\r\n          width: \"80%\",\r\n          margin: \"15px auto\",\r\n          border: \"1px solid #4477ff\",\r\n        }}\r\n        placeholder=\"Select Country\"\r\n        fluid\r\n        selection\r\n        search\r\n        onChange={(e, result) => handleChange(result.value)}\r\n        options={\r\n          availableCountries &&\r\n          availableCountries.map((c) => {\r\n            return {\r\n              key: c.ISO2,\r\n              text: c.Country,\r\n              value: c.Country,\r\n            };\r\n          })\r\n        }\r\n      />\r\n\r\n      {countryCases && (\r\n        <>\r\n          {getAllTypesOfCases()}\r\n          <Segment\r\n            style={{\r\n              height: 600,\r\n              width: 600,\r\n              margin: \"10px auto\",\r\n              position: \"relative\",\r\n            }}\r\n            id=\"chart-segment\"\r\n          >\r\n            <Bar\r\n              id=\"chart\"\r\n              data={countryCases}\r\n              responsive={true}\r\n              options={{\r\n                legend: {\r\n                  display: true,\r\n                  position: \"top\",\r\n                },\r\n                scales: {\r\n                  yAxes: [\r\n                    {\r\n                      scaleLabel: {\r\n                        display: true,\r\n                        labelString: \" Number of Confirmed Cases\",\r\n                      },\r\n                    },\r\n                  ],\r\n                  xAxes: [\r\n                    {\r\n                      scaleLabel: {\r\n                        display: true,\r\n                        labelString: \"Date\",\r\n                      },\r\n                    },\r\n                  ],\r\n                },\r\n              }}\r\n              height={200}\r\n              width={200}\r\n              style={{\r\n                margin: \"auto\",\r\n              }}\r\n            />\r\n          </Segment>\r\n\r\n          <CountryLocationMap lat={countryCases.lat} lng={countryCases.lng} />\r\n        </>\r\n      )}\r\n\r\n      {error && (\r\n        <>\r\n          <Error />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CasesByCountry;\r\n","import React from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\n\r\n//Import Custom Components\r\nimport Title from \"./components/Title\";\r\nimport CasesWorldwide from \"./components/CasesWorldwide\";\r\nimport Introduction from \"./components/Introduction\";\r\nimport WrappedCountry from \"./components/CasesByCountry\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Title />\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Introduction />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <CasesWorldwide />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <WrappedCountry />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  GET_WORLDWIDE_SUMMARY,\r\n  GET_ALL_AVAILABLE_COUNTRIES,\r\n  GET_COUNTRY_CASES,\r\n  SET_ERROR,\r\n} from \"./Actions\";\r\n\r\nconst covidInitialState = {\r\n  data: \"\",\r\n  availableCountries: \"\",\r\n  countryCases: \"\",\r\n  allTypesOfCountryCases: \"\",\r\n  error: false,\r\n};\r\n\r\nexport const covidReducer = (state = covidInitialState, action) => {\r\n  switch (action.type) {\r\n    case GET_WORLDWIDE_SUMMARY:\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n      };\r\n\r\n    case GET_ALL_AVAILABLE_COUNTRIES:\r\n      return {\r\n        ...state,\r\n        availableCountries: action.payload,\r\n      };\r\n\r\n    case GET_COUNTRY_CASES:\r\n      return {\r\n        ...state,\r\n        countryCases: action.payload,\r\n        error: false,\r\n      };\r\n\r\n    case SET_ERROR:\r\n      return {\r\n        ...state,\r\n        countryCases: \"\",\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { covidReducer } from \"./reducer\";\r\n\r\nconst rootReducer = covidReducer;\r\n\r\nexport default createStore(rootReducer, applyMiddleware(thunk));\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\n//Redux Imports\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}